{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0","program":"/home/scoob/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","serial_core","/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","-C","metadata=1a02b6ea90fc3c72","-C","extra-filename=-1a02b6ea90fc3c72","--out-dir","/home/scoob/Programming/Rust/soil-i2c/target/rls/debug/deps","-L","dependency=/home/scoob/Programming/Rust/soil-i2c/target/rls/debug/deps","--extern","libc=/home/scoob/Programming/Rust/soil-i2c/target/rls/debug/deps/liblibc-67f4cd3da887bbfb.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/scoob/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/scoob/Programming/Rust/soil-i2c/target/rls/debug/deps/libserial_core-1a02b6ea90fc3c72.rmeta"},"prelude":{"crate_id":{"name":"serial_core","disambiguator":[7546920935443954718,17830860820155157495]},"crate_root":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src","external_crates":[{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[13842155912677385872,11660590378338683385]}},{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[1145230128757463294,15976268636418953592]}},{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10006185802367012891,4937926339965588888]}},{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[18134491841186215314,8619879253945163470]}},{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4357087487764653857,7816708319091665300]}},{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10862771416828768076,14090399182622295334]}},{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7832813774001485751,4465207999706185911]}},{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14203079308812153325,7069038021421518271]}},{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[17468104730350570711,1510909898039763528]}},{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[11081656445949358564,12304596919514716713]}},{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[4496289705150708668,14963538919535077439]}},{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[12585038344938944291,11081610577875308163]}},{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4866546307375520792,3681606541934731072]}},{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[6903286030758146719,12939842262273902871]}}],"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":0,"byte_end":27077,"line_start":1,"line_end":802,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":106,"byte_end":107,"line_start":6,"line_end":6,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":106,"byte_end":107,"line_start":6,"line_end":6,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":106,"byte_end":107,"line_start":6,"line_end":6,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":106,"byte_end":107,"line_start":6,"line_end":6,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":106,"byte_end":107,"line_start":6,"line_end":6,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":45},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":396,"byte_end":406,"line_start":20,"line_end":20,"column_start":14,"column_end":24},"alias_span":null,"name":"SerialPort","value":"","parent":{"krate":0,"index":12}},{"kind":"Use","ref_id":{"krate":0,"index":68},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":408,"byte_end":426,"line_start":20,"line_end":20,"column_start":26,"column_end":44},"alias_span":null,"name":"SerialPortSettings","value":"","parent":{"krate":0,"index":12}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":0,"byte_end":27077,"line_start":1,"line_end":802,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":16},{"krate":0,"index":90},{"krate":0,"index":108},{"krate":0,"index":106},{"krate":0,"index":105},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":18},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":115},{"krate":0,"index":151},{"krate":0,"index":150},{"krate":0,"index":148},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":30},{"krate":0,"index":153},{"krate":0,"index":171},{"krate":0,"index":170},{"krate":0,"index":168},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":173},{"krate":0,"index":189},{"krate":0,"index":188},{"krate":0,"index":186},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":191},{"krate":0,"index":205},{"krate":0,"index":204},{"krate":0,"index":202},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":207},{"krate":0,"index":223},{"krate":0,"index":222},{"krate":0,"index":220},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":33},{"krate":0,"index":45},{"krate":0,"index":56},{"krate":0,"index":68},{"krate":0,"index":225},{"krate":0,"index":241},{"krate":0,"index":240},{"krate":0,"index":238},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":79}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":12},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":373,"byte_end":380,"line_start":19,"line_end":19,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":13}],"decl_id":null,"docs":" A module that exports traits that are useful to have in scope.","sig":null,"attributes":[{"value":"/ A module that exports traits that are useful to have in scope.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":195,"byte_end":261,"line_start":12,"line_end":12,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":262,"byte_end":265,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ It is intended to be glob imported:","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":266,"byte_end":305,"line_start":14,"line_end":14,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":306,"byte_end":309,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":310,"byte_end":323,"line_start":16,"line_end":16,"column_start":1,"column_end":14}},{"value":"/ use serial_core::prelude::*;","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":324,"byte_end":356,"line_start":17,"line_end":17,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":357,"byte_end":364,"line_start":18,"line_end":18,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":16},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":591,"byte_end":597,"line_start":26,"line_end":26,"column_start":10,"column_end":16},"name":"Result","qualname":"::Result","value":"std::result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" A type for results generated by interacting with serial ports.","sig":null,"attributes":[{"value":"/ A type for results generated by interacting with serial ports.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":432,"byte_end":498,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":499,"byte_end":502,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The `Err` type is hard-wired to [`serial_core::Error`](struct.Error.html).","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":503,"byte_end":581,"line_start":25,"line_end":25,"column_start":1,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":91},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":1057,"byte_end":1065,"line_start":38,"line_end":38,"column_start":5,"column_end":13},"name":"NoDevice","qualname":"::ErrorKind::NoDevice","value":"ErrorKind::NoDevice","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" The device is not available.","sig":null,"attributes":[{"value":"/ The device is not available.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":889,"byte_end":921,"line_start":34,"line_end":34,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":926,"byte_end":929,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ This could indicate that the device is in use by another process or was disconnected while","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":934,"byte_end":1028,"line_start":36,"line_end":36,"column_start":5,"column_end":99}},{"value":"/ performing I/O.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":1033,"byte_end":1052,"line_start":37,"line_end":37,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":93},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":1107,"byte_end":1119,"line_start":41,"line_end":41,"column_start":5,"column_end":17},"name":"InvalidInput","qualname":"::ErrorKind::InvalidInput","value":"ErrorKind::InvalidInput","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" A parameter was incorrect.\n","sig":null,"attributes":[{"value":"/ A parameter was incorrect.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":1072,"byte_end":1102,"line_start":40,"line_end":40,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":95},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":1238,"byte_end":1240,"line_start":46,"line_end":46,"column_start":5,"column_end":7},"name":"Io","qualname":"::ErrorKind::Io","value":"ErrorKind::Io(io::ErrorKind)","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" An I/O error occured.","sig":null,"attributes":[{"value":"/ An I/O error occured.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":1126,"byte_end":1151,"line_start":43,"line_end":43,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":1156,"byte_end":1159,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ The type of I/O error is determined by the inner `io::ErrorKind`.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":1164,"byte_end":1233,"line_start":45,"line_end":45,"column_start":5,"column_end":74}}]},{"kind":"Enum","id":{"krate":0,"index":90},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":873,"byte_end":882,"line_start":33,"line_end":33,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::ErrorKind","value":"ErrorKind::{NoDevice, InvalidInput, Io}","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":93},{"krate":0,"index":95}],"decl_id":null,"docs":" Categories of errors that can occur when interacting with serial ports.","sig":null,"attributes":[{"value":"/ Categories of errors that can occur when interacting with serial ports.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":635,"byte_end":710,"line_start":28,"line_end":28,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":711,"byte_end":714,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ This list is intended to grow over time and it is not recommended to exhaustively match against","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":715,"byte_end":814,"line_start":30,"line_end":30,"column_start":1,"column_end":100}},{"value":"/ it.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":815,"byte_end":822,"line_start":31,"line_end":31,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":110},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":1334,"byte_end":1339,"line_start":51,"line_end":51,"column_start":12,"column_end":17},"name":"Error","qualname":"::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":112}],"decl_id":null,"docs":" An error type for serial port operations.\n","sig":null,"attributes":[{"value":"/ An error type for serial port operations.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":1260,"byte_end":1305,"line_start":49,"line_end":49,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":1415,"byte_end":1418,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"new","qualname":"<Error>::new","value":"fn <T> (kind: ErrorKind, description: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":1654,"byte_end":1658,"line_start":65,"line_end":65,"column_start":12,"column_end":16},"name":"kind","qualname":"<Error>::kind","value":"fn (&self) -> ErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `ErrorKind` for this error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `ErrorKind` for this error.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":1585,"byte_end":1642,"line_start":64,"line_end":64,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":116},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3008,"byte_end":3015,"line_start":111,"line_end":111,"column_start":5,"column_end":12},"name":"Baud110","qualname":"::BaudRate::Baud110","value":"BaudRate::Baud110","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" 110 baud.\n","sig":null,"attributes":[{"value":"/ 110 baud.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":2990,"byte_end":3003,"line_start":110,"line_end":110,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":118},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3040,"byte_end":3047,"line_start":114,"line_end":114,"column_start":5,"column_end":12},"name":"Baud300","qualname":"::BaudRate::Baud300","value":"BaudRate::Baud300","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" 300 baud.\n","sig":null,"attributes":[{"value":"/ 300 baud.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3022,"byte_end":3035,"line_start":113,"line_end":113,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":120},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3072,"byte_end":3079,"line_start":117,"line_end":117,"column_start":5,"column_end":12},"name":"Baud600","qualname":"::BaudRate::Baud600","value":"BaudRate::Baud600","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" 600 baud.\n","sig":null,"attributes":[{"value":"/ 600 baud.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3054,"byte_end":3067,"line_start":116,"line_end":116,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":122},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3105,"byte_end":3113,"line_start":120,"line_end":120,"column_start":5,"column_end":13},"name":"Baud1200","qualname":"::BaudRate::Baud1200","value":"BaudRate::Baud1200","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" 1200 baud.\n","sig":null,"attributes":[{"value":"/ 1200 baud.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3086,"byte_end":3100,"line_start":119,"line_end":119,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":124},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3139,"byte_end":3147,"line_start":123,"line_end":123,"column_start":5,"column_end":13},"name":"Baud2400","qualname":"::BaudRate::Baud2400","value":"BaudRate::Baud2400","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" 2400 baud.\n","sig":null,"attributes":[{"value":"/ 2400 baud.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3120,"byte_end":3134,"line_start":122,"line_end":122,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":126},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3173,"byte_end":3181,"line_start":126,"line_end":126,"column_start":5,"column_end":13},"name":"Baud4800","qualname":"::BaudRate::Baud4800","value":"BaudRate::Baud4800","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" 4800 baud.\n","sig":null,"attributes":[{"value":"/ 4800 baud.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3154,"byte_end":3168,"line_start":125,"line_end":125,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":128},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3207,"byte_end":3215,"line_start":129,"line_end":129,"column_start":5,"column_end":13},"name":"Baud9600","qualname":"::BaudRate::Baud9600","value":"BaudRate::Baud9600","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" 9600 baud.\n","sig":null,"attributes":[{"value":"/ 9600 baud.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3188,"byte_end":3202,"line_start":128,"line_end":128,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":130},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3243,"byte_end":3252,"line_start":132,"line_end":132,"column_start":5,"column_end":14},"name":"Baud19200","qualname":"::BaudRate::Baud19200","value":"BaudRate::Baud19200","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" 19,200 baud.\n","sig":null,"attributes":[{"value":"/ 19,200 baud.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3222,"byte_end":3238,"line_start":131,"line_end":131,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":132},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3280,"byte_end":3289,"line_start":135,"line_end":135,"column_start":5,"column_end":14},"name":"Baud38400","qualname":"::BaudRate::Baud38400","value":"BaudRate::Baud38400","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" 38,400 baud.\n","sig":null,"attributes":[{"value":"/ 38,400 baud.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3259,"byte_end":3275,"line_start":134,"line_end":134,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":134},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3317,"byte_end":3326,"line_start":138,"line_end":138,"column_start":5,"column_end":14},"name":"Baud57600","qualname":"::BaudRate::Baud57600","value":"BaudRate::Baud57600","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" 57,600 baud.\n","sig":null,"attributes":[{"value":"/ 57,600 baud.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3296,"byte_end":3312,"line_start":137,"line_end":137,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":136},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3355,"byte_end":3365,"line_start":141,"line_end":141,"column_start":5,"column_end":15},"name":"Baud115200","qualname":"::BaudRate::Baud115200","value":"BaudRate::Baud115200","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" 115,200 baud.\n","sig":null,"attributes":[{"value":"/ 115,200 baud.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3333,"byte_end":3350,"line_start":140,"line_end":140,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":138},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3711,"byte_end":3720,"line_start":153,"line_end":153,"column_start":5,"column_end":14},"name":"BaudOther","qualname":"::BaudRate::BaudOther","value":"BaudRate::BaudOther(usize)","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Non-standard baud rates.","sig":null,"attributes":[{"value":"/ Non-standard baud rates.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3372,"byte_end":3400,"line_start":143,"line_end":143,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3405,"byte_end":3408,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ `BaudOther` can be used to set non-standard baud rates by setting its member to be the","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3413,"byte_end":3503,"line_start":145,"line_end":145,"column_start":5,"column_end":95}},{"value":"/ desired baud rate.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3508,"byte_end":3530,"line_start":146,"line_end":146,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3535,"byte_end":3538,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3543,"byte_end":3556,"line_start":148,"line_end":148,"column_start":5,"column_end":18}},{"value":"/ serial_core::BaudOther(4_000_000); // 4,000,000 baud","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3561,"byte_end":3617,"line_start":149,"line_end":149,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3622,"byte_end":3629,"line_start":150,"line_end":150,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3634,"byte_end":3637,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ Non-standard baud rates may not be supported on all systems.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3642,"byte_end":3706,"line_start":152,"line_end":152,"column_start":5,"column_end":69}}]},{"kind":"Enum","id":{"krate":0,"index":115},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":2975,"byte_end":2983,"line_start":109,"line_end":109,"column_start":10,"column_end":18},"name":"BaudRate","qualname":"::BaudRate","value":"BaudRate::{Baud110, Baud300, Baud600, Baud1200, Baud2400, Baud4800, Baud9600, Baud19200, Baud38400, Baud57600, Baud115200, BaudOther}","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138}],"decl_id":null,"docs":" Serial port baud rates.","sig":null,"attributes":[{"value":"/ Serial port baud rates.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":2490,"byte_end":2517,"line_start":100,"line_end":100,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":2518,"byte_end":2521,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ ## Portability","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":2522,"byte_end":2540,"line_start":102,"line_end":102,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":2541,"byte_end":2544,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ The `BaudRate` variants with numeric suffixes, e.g., `Baud9600`, indicate standard baud rates","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":2545,"byte_end":2642,"line_start":104,"line_end":104,"column_start":1,"column_end":98}},{"value":"/ that are widely-supported on many systems. While non-standard baud rates can be set with","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":2643,"byte_end":2735,"line_start":105,"line_end":105,"column_start":1,"column_end":93}},{"value":"/ `BaudOther`, their behavior is system-dependent. Some systems may not support arbitrary baud","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":2736,"byte_end":2832,"line_start":106,"line_end":106,"column_start":1,"column_end":97}},{"value":"/ rates. Using the standard baud rates is more likely to result in portable applications.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":2833,"byte_end":2924,"line_start":107,"line_end":107,"column_start":1,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":4260,"byte_end":4270,"line_start":170,"line_end":170,"column_start":12,"column_end":22},"name":"from_speed","qualname":"<BaudRate>::from_speed","value":"fn (speed: usize) -> BaudRate","parent":null,"children":[],"decl_id":null,"docs":" Creates a `BaudRate` for a particular speed.","sig":null,"attributes":[{"value":"/ Creates a `BaudRate` for a particular speed.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3752,"byte_end":3800,"line_start":157,"line_end":157,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3805,"byte_end":3808,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ This function can be used to select a `BaudRate` variant from an integer containing the","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3813,"byte_end":3904,"line_start":159,"line_end":159,"column_start":5,"column_end":96}},{"value":"/ desired baud rate.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3909,"byte_end":3931,"line_start":160,"line_end":160,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3936,"byte_end":3939,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ ## Example","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3944,"byte_end":3958,"line_start":162,"line_end":162,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3963,"byte_end":3966,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3971,"byte_end":3978,"line_start":164,"line_end":164,"column_start":5,"column_end":12}},{"value":"/ # use serial_core::BaudRate;","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3983,"byte_end":4015,"line_start":165,"line_end":165,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(BaudRate::Baud9600, BaudRate::from_speed(9600));","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":4020,"byte_end":4083,"line_start":166,"line_end":166,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(BaudRate::Baud115200, BaudRate::from_speed(115200));","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":4088,"byte_end":4155,"line_start":167,"line_end":167,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(BaudRate::BaudOther(4000000), BaudRate::from_speed(4000000));","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":4160,"byte_end":4236,"line_start":168,"line_end":168,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":4241,"byte_end":4248,"line_start":169,"line_end":169,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":5179,"byte_end":5184,"line_start":197,"line_end":197,"column_start":12,"column_end":17},"name":"speed","qualname":"<BaudRate>::speed","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the baud rate as an integer.","sig":null,"attributes":[{"value":"/ Returns the baud rate as an integer.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":4852,"byte_end":4892,"line_start":187,"line_end":187,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":4897,"byte_end":4900,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ ## Example","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":4905,"byte_end":4919,"line_start":189,"line_end":189,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":4924,"byte_end":4927,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":4932,"byte_end":4939,"line_start":191,"line_end":191,"column_start":5,"column_end":12}},{"value":"/ # use serial_core::BaudRate;","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":4944,"byte_end":4976,"line_start":192,"line_end":192,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(9600, BaudRate::Baud9600.speed());","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":4981,"byte_end":5030,"line_start":193,"line_end":193,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(115200, BaudRate::Baud115200.speed());","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":5035,"byte_end":5088,"line_start":194,"line_end":194,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(4000000, BaudRate::BaudOther(4000000).speed());","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":5093,"byte_end":5155,"line_start":195,"line_end":195,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":5160,"byte_end":5167,"line_start":196,"line_end":196,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":154},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":5900,"byte_end":5905,"line_start":219,"line_end":219,"column_start":5,"column_end":10},"name":"Bits5","qualname":"::CharSize::Bits5","value":"CharSize::Bits5","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" 5 bits per character.\n","sig":null,"attributes":[{"value":"/ 5 bits per character.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":5870,"byte_end":5895,"line_start":218,"line_end":218,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":156},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":5942,"byte_end":5947,"line_start":222,"line_end":222,"column_start":5,"column_end":10},"name":"Bits6","qualname":"::CharSize::Bits6","value":"CharSize::Bits6","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" 6 bits per character.\n","sig":null,"attributes":[{"value":"/ 6 bits per character.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":5912,"byte_end":5937,"line_start":221,"line_end":221,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":158},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":5984,"byte_end":5989,"line_start":225,"line_end":225,"column_start":5,"column_end":10},"name":"Bits7","qualname":"::CharSize::Bits7","value":"CharSize::Bits7","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" 7 bits per character.\n","sig":null,"attributes":[{"value":"/ 7 bits per character.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":5954,"byte_end":5979,"line_start":224,"line_end":224,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":160},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6026,"byte_end":6031,"line_start":228,"line_end":228,"column_start":5,"column_end":10},"name":"Bits8","qualname":"::CharSize::Bits8","value":"CharSize::Bits8","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" 8 bits per character.\n","sig":null,"attributes":[{"value":"/ 8 bits per character.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":5996,"byte_end":6021,"line_start":227,"line_end":227,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":153},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":5855,"byte_end":5863,"line_start":217,"line_end":217,"column_start":10,"column_end":18},"name":"CharSize","qualname":"::CharSize","value":"CharSize::{Bits5, Bits6, Bits7, Bits8}","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160}],"decl_id":null,"docs":" Number of bits per character.\n","sig":null,"attributes":[{"value":"/ Number of bits per character.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":5771,"byte_end":5804,"line_start":215,"line_end":215,"column_start":1,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":174},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6570,"byte_end":6580,"line_start":243,"line_end":243,"column_start":5,"column_end":15},"name":"ParityNone","qualname":"::Parity::ParityNone","value":"Parity::ParityNone","parent":{"krate":0,"index":173},"children":[],"decl_id":null,"docs":" No parity bit.\n","sig":null,"attributes":[{"value":"/ No parity bit.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6547,"byte_end":6565,"line_start":242,"line_end":242,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":176},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6633,"byte_end":6642,"line_start":246,"line_end":246,"column_start":5,"column_end":14},"name":"ParityOdd","qualname":"::Parity::ParityOdd","value":"Parity::ParityOdd","parent":{"krate":0,"index":173},"children":[],"decl_id":null,"docs":" Parity bit sets odd number of 1 bits.\n","sig":null,"attributes":[{"value":"/ Parity bit sets odd number of 1 bits.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6587,"byte_end":6628,"line_start":245,"line_end":245,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":178},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6696,"byte_end":6706,"line_start":249,"line_end":249,"column_start":5,"column_end":15},"name":"ParityEven","qualname":"::Parity::ParityEven","value":"Parity::ParityEven","parent":{"krate":0,"index":173},"children":[],"decl_id":null,"docs":" Parity bit sets even number of 1 bits.\n","sig":null,"attributes":[{"value":"/ Parity bit sets even number of 1 bits.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6649,"byte_end":6691,"line_start":248,"line_end":248,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":173},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6534,"byte_end":6540,"line_start":241,"line_end":241,"column_start":10,"column_end":16},"name":"Parity","qualname":"::Parity","value":"Parity::{ParityNone, ParityOdd, ParityEven}","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178}],"decl_id":null,"docs":" Parity checking modes.","sig":null,"attributes":[{"value":"/ Parity checking modes.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6036,"byte_end":6062,"line_start":231,"line_end":231,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6063,"byte_end":6066,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ When parity checking is enabled (`ParityOdd` or `ParityEven`) an extra bit is transmitted with","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6067,"byte_end":6165,"line_start":233,"line_end":233,"column_start":1,"column_end":99}},{"value":"/ each character. The value of the parity bit is arranged so that the number of 1 bits in the","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6166,"byte_end":6261,"line_start":234,"line_end":234,"column_start":1,"column_end":96}},{"value":"/ character (including the parity bit) is an even number (`ParityEven`) or an odd number","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6262,"byte_end":6352,"line_start":235,"line_end":235,"column_start":1,"column_end":91}},{"value":"/ (`ParityOdd`).","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6353,"byte_end":6371,"line_start":236,"line_end":236,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6372,"byte_end":6375,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ Parity checking is disabled by setting `ParityNone`, in which case parity bits are not","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6376,"byte_end":6466,"line_start":238,"line_end":238,"column_start":1,"column_end":91}},{"value":"/ transmitted.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6467,"byte_end":6483,"line_start":239,"line_end":239,"column_start":1,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":192},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6880,"byte_end":6885,"line_start":258,"line_end":258,"column_start":5,"column_end":10},"name":"Stop1","qualname":"::StopBits::Stop1","value":"StopBits::Stop1","parent":{"krate":0,"index":191},"children":[],"decl_id":null,"docs":" One stop bit.\n","sig":null,"attributes":[{"value":"/ One stop bit.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6858,"byte_end":6875,"line_start":257,"line_end":257,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":194},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6915,"byte_end":6920,"line_start":261,"line_end":261,"column_start":5,"column_end":10},"name":"Stop2","qualname":"::StopBits::Stop2","value":"StopBits::Stop2","parent":{"krate":0,"index":191},"children":[],"decl_id":null,"docs":" Two stop bits.\n","sig":null,"attributes":[{"value":"/ Two stop bits.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6892,"byte_end":6910,"line_start":260,"line_end":260,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":191},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6843,"byte_end":6851,"line_start":256,"line_end":256,"column_start":10,"column_end":18},"name":"StopBits","qualname":"::StopBits","value":"StopBits::{Stop1, Stop2}","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":194}],"decl_id":null,"docs":" Number of stop bits.","sig":null,"attributes":[{"value":"/ Number of stop bits.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6711,"byte_end":6735,"line_start":252,"line_end":252,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6736,"byte_end":6739,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ Stop bits are transmitted after every character.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6740,"byte_end":6792,"line_start":254,"line_end":254,"column_start":1,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":208},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":7042,"byte_end":7050,"line_start":268,"line_end":268,"column_start":5,"column_end":13},"name":"FlowNone","qualname":"::FlowControl::FlowNone","value":"FlowControl::FlowNone","parent":{"krate":0,"index":207},"children":[],"decl_id":null,"docs":" No flow control.\n","sig":null,"attributes":[{"value":"/ No flow control.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":7017,"byte_end":7037,"line_start":267,"line_end":267,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":210},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":7100,"byte_end":7112,"line_start":271,"line_end":271,"column_start":5,"column_end":17},"name":"FlowSoftware","qualname":"::FlowControl::FlowSoftware","value":"FlowControl::FlowSoftware","parent":{"krate":0,"index":207},"children":[],"decl_id":null,"docs":" Flow control using XON/XOFF bytes.\n","sig":null,"attributes":[{"value":"/ Flow control using XON/XOFF bytes.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":7057,"byte_end":7095,"line_start":270,"line_end":270,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":212},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":7163,"byte_end":7175,"line_start":274,"line_end":274,"column_start":5,"column_end":17},"name":"FlowHardware","qualname":"::FlowControl::FlowHardware","value":"FlowControl::FlowHardware","parent":{"krate":0,"index":207},"children":[],"decl_id":null,"docs":" Flow control using RTS/CTS signals.\n","sig":null,"attributes":[{"value":"/ Flow control using RTS/CTS signals.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":7119,"byte_end":7158,"line_start":273,"line_end":273,"column_start":5,"column_end":44}}]},{"kind":"Enum","id":{"krate":0,"index":207},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6999,"byte_end":7010,"line_start":266,"line_end":266,"column_start":10,"column_end":21},"name":"FlowControl","qualname":"::FlowControl","value":"FlowControl::{FlowNone, FlowSoftware, FlowHardware}","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212}],"decl_id":null,"docs":" Flow control modes.\n","sig":null,"attributes":[{"value":"/ Flow control modes.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":6925,"byte_end":6948,"line_start":264,"line_end":264,"column_start":1,"column_end":24}}]},{"kind":"Trait","id":{"krate":0,"index":33},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":8714,"byte_end":8726,"line_start":300,"line_end":300,"column_start":11,"column_end":23},"name":"SerialDevice","qualname":"::SerialDevice","value":"SerialDevice: io::Read + io::Write","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44}],"decl_id":null,"docs":" A trait for implementing serial devices.","sig":null,"attributes":[{"value":"/ A trait for implementing serial devices.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":7180,"byte_end":7224,"line_start":277,"line_end":277,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":7225,"byte_end":7228,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ This trait is meant to be used to implement new serial port devices. To use a serial port","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":7229,"byte_end":7322,"line_start":279,"line_end":279,"column_start":1,"column_end":94}},{"value":"/ device, the [`SerialPort`](trait.SerialPort.html) trait should be used instead. Any type that","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":7323,"byte_end":7420,"line_start":280,"line_end":280,"column_start":1,"column_end":98}},{"value":"/ implements the `SerialDevice` trait will automatically implement the `SerialPort` trait as","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":7421,"byte_end":7515,"line_start":281,"line_end":281,"column_start":1,"column_end":95}},{"value":"/ well.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":7516,"byte_end":7525,"line_start":282,"line_end":282,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":7526,"byte_end":7529,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ To implement a new serial port device, it's necessary to define a type that can manipulate the","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":7530,"byte_end":7628,"line_start":284,"line_end":284,"column_start":1,"column_end":99}},{"value":"/ serial port device's settings (baud rate, parity mode, etc). This type is defined by the","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":7629,"byte_end":7721,"line_start":285,"line_end":285,"column_start":1,"column_end":93}},{"value":"/ `Settings` associated type. The current settings should be determined by reading from the","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":7722,"byte_end":7815,"line_start":286,"line_end":286,"column_start":1,"column_end":94}},{"value":"/ hardware or operating system for every call to `read_settings()`. The settings can then be","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":7816,"byte_end":7910,"line_start":287,"line_end":287,"column_start":1,"column_end":95}},{"value":"/ manipulated in memory before being commited to the device with `write_settings()`.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":7911,"byte_end":7997,"line_start":288,"line_end":288,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":7998,"byte_end":8001,"line_start":289,"line_end":289,"column_start":1,"column_end":4}},{"value":"/ Types that implement `SerialDevice` must also implement `std::io::Read` and `std::io::Write`.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":8002,"byte_end":8099,"line_start":290,"line_end":290,"column_start":1,"column_end":98}},{"value":"/ The `read()` and `write()` operations of these traits should honor the timeout that has been","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":8100,"byte_end":8196,"line_start":291,"line_end":291,"column_start":1,"column_end":97}},{"value":"/ set with the most recent successful call to `set_timeout()`. This timeout value should also be","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":8197,"byte_end":8295,"line_start":292,"line_end":292,"column_start":1,"column_end":99}},{"value":"/ accessible by calling the `timeout()` method.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":8296,"byte_end":8345,"line_start":293,"line_end":293,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":8346,"byte_end":8349,"line_start":294,"line_end":294,"column_start":1,"column_end":4}},{"value":"/ A serial port device should also provide access to some basic control signals: RTS, DTR, CTS,","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":8350,"byte_end":8447,"line_start":295,"line_end":295,"column_start":1,"column_end":98}},{"value":"/ DSR, RI, and CD. The values for the control signals are represented as boolean values, with","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":8448,"byte_end":8543,"line_start":296,"line_end":296,"column_start":1,"column_end":96}},{"value":"/ `true` indicating the the control signal is active.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":8544,"byte_end":8599,"line_start":297,"line_end":297,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":8600,"byte_end":8603,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"/ Lastly, types that implement `SerialDevice` should release any acquired resources when dropped.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":8604,"byte_end":8703,"line_start":299,"line_end":299,"column_start":1,"column_end":100}}]},{"kind":"Type","id":{"krate":0,"index":34},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":9152,"byte_end":9160,"line_start":307,"line_end":307,"column_start":10,"column_end":18},"name":"Settings","qualname":"::SerialDevice::Settings","value":"type Settings: SerialPortSettings;","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" A type that implements the settings for the serial port device.","sig":null,"attributes":[{"value":"/ A type that implements the settings for the serial port device.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":8755,"byte_end":8822,"line_start":301,"line_end":301,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":8827,"byte_end":8830,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ The `Settings` type is used to retrieve and modify the serial port's settings. This type","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":8835,"byte_end":8927,"line_start":303,"line_end":303,"column_start":5,"column_end":97}},{"value":"/ should own any native structures used to manipulate the device's settings, but it should","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":8932,"byte_end":9024,"line_start":304,"line_end":304,"column_start":5,"column_end":97}},{"value":"/ not cause any changes in the underlying hardware until written to the device with","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":9029,"byte_end":9114,"line_start":305,"line_end":305,"column_start":5,"column_end":90}},{"value":"/ `write_settings()`.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":9119,"byte_end":9142,"line_start":306,"line_end":306,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":9726,"byte_end":9739,"line_start":322,"line_end":322,"column_start":8,"column_end":21},"name":"read_settings","qualname":"::SerialDevice::read_settings","value":"fn (&self) -> ::Result<Self::Settings>","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" Returns the device's current settings.","sig":null,"attributes":[{"value":"/ Returns the device's current settings.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":9187,"byte_end":9229,"line_start":309,"line_end":309,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":9234,"byte_end":9237,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ This function attempts to read the current settings from the hardware. The hardware's","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":9242,"byte_end":9331,"line_start":311,"line_end":311,"column_start":5,"column_end":94}},{"value":"/ current settings may not match the settings that were most recently written to the hardware","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":9336,"byte_end":9431,"line_start":312,"line_end":312,"column_start":5,"column_end":100}},{"value":"/ with `write_settings()`.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":9436,"byte_end":9464,"line_start":313,"line_end":313,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":9469,"byte_end":9472,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":9477,"byte_end":9490,"line_start":315,"line_end":315,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":9495,"byte_end":9498,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ This function returns an error if the settings could not be read from the underlying","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":9503,"byte_end":9591,"line_start":317,"line_end":317,"column_start":5,"column_end":93}},{"value":"/ hardware:","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":9596,"byte_end":9609,"line_start":318,"line_end":318,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":9614,"byte_end":9617,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ * `NoDevice` if the device was disconnected.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":9622,"byte_end":9670,"line_start":320,"line_end":320,"column_start":5,"column_end":53}},{"value":"/ * `Io` for any other type of I/O error.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":9675,"byte_end":9718,"line_start":321,"line_end":321,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":10685,"byte_end":10699,"line_start":341,"line_end":341,"column_start":8,"column_end":22},"name":"write_settings","qualname":"::SerialDevice::write_settings","value":"fn (&mut self, settings: &Self::Settings) -> ::Result<()>","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" Applies new settings to the serial device.","sig":null,"attributes":[{"value":"/ Applies new settings to the serial device.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":9781,"byte_end":9827,"line_start":324,"line_end":324,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":9832,"byte_end":9835,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ This function attempts to apply all settings to the serial device. Some settings may not be","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":9840,"byte_end":9935,"line_start":326,"line_end":326,"column_start":5,"column_end":100}},{"value":"/ supported by the underlying hardware, in which case the result is dependent on the","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":9940,"byte_end":10026,"line_start":327,"line_end":327,"column_start":5,"column_end":91}},{"value":"/ implementation. A successful return value does not guarantee that all settings were","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":10031,"byte_end":10118,"line_start":328,"line_end":328,"column_start":5,"column_end":92}},{"value":"/ appliied successfully. To check which settings were applied by a successful write,","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":10123,"byte_end":10209,"line_start":329,"line_end":329,"column_start":5,"column_end":91}},{"value":"/ applications should use the `read_settings()` method to obtain the latest configuration","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":10214,"byte_end":10305,"line_start":330,"line_end":330,"column_start":5,"column_end":96}},{"value":"/ state from the device.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":10310,"byte_end":10336,"line_start":331,"line_end":331,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":10341,"byte_end":10344,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":10349,"byte_end":10362,"line_start":333,"line_end":333,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":10367,"byte_end":10370,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ This function returns an error if the settings could not be applied to the underlying","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":10375,"byte_end":10464,"line_start":335,"line_end":335,"column_start":5,"column_end":94}},{"value":"/ hardware:","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":10469,"byte_end":10482,"line_start":336,"line_end":336,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":10487,"byte_end":10490,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ * `NoDevice` if the device was disconnected.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":10495,"byte_end":10543,"line_start":338,"line_end":338,"column_start":5,"column_end":53}},{"value":"/ * `InvalidInput` if a setting is not compatible with the underlying hardware.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":10548,"byte_end":10629,"line_start":339,"line_end":339,"column_start":5,"column_end":86}},{"value":"/ * `Io` for any other type of I/O error.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":10634,"byte_end":10677,"line_start":340,"line_end":340,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":10800,"byte_end":10807,"line_start":344,"line_end":344,"column_start":8,"column_end":15},"name":"timeout","qualname":"::SerialDevice::timeout","value":"fn (&self) -> Duration","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" Returns the current timeout.\n","sig":null,"attributes":[{"value":"/ Returns the current timeout.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":10760,"byte_end":10792,"line_start":343,"line_end":343,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":10888,"byte_end":10899,"line_start":347,"line_end":347,"column_start":8,"column_end":19},"name":"set_timeout","qualname":"::SerialDevice::set_timeout","value":"fn (&mut self, timeout: Duration) -> ::Result<()>","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" Sets the timeout for future I/O operations.\n","sig":null,"attributes":[{"value":"/ Sets the timeout for future I/O operations.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":10833,"byte_end":10880,"line_start":346,"line_end":346,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":11406,"byte_end":11413,"line_start":360,"line_end":360,"column_start":8,"column_end":15},"name":"set_rts","qualname":"::SerialDevice::set_rts","value":"fn (&mut self, level: bool) -> ::Result<()>","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" Sets the state of the RTS (Request To Send) control signal.","sig":null,"attributes":[{"value":"/ Sets the state of the RTS (Request To Send) control signal.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":10952,"byte_end":11015,"line_start":349,"line_end":349,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":11020,"byte_end":11023,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ Setting a value of `true` asserts the RTS control signal. `false` clears the signal.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":11028,"byte_end":11116,"line_start":351,"line_end":351,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":11121,"byte_end":11124,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":11129,"byte_end":11142,"line_start":353,"line_end":353,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":11147,"byte_end":11150,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ This function returns an error if the RTS control signal could not be set to the desired","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":11155,"byte_end":11247,"line_start":355,"line_end":355,"column_start":5,"column_end":97}},{"value":"/ state on the underlying hardware:","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":11252,"byte_end":11289,"line_start":356,"line_end":356,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":11294,"byte_end":11297,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ * `NoDevice` if the device was disconnected.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":11302,"byte_end":11350,"line_start":358,"line_end":358,"column_start":5,"column_end":53}},{"value":"/ * `Io` for any other type of I/O error.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":11355,"byte_end":11398,"line_start":359,"line_end":359,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":11918,"byte_end":11925,"line_start":373,"line_end":373,"column_start":8,"column_end":15},"name":"set_dtr","qualname":"::SerialDevice::set_dtr","value":"fn (&mut self, level: bool) -> ::Result<()>","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" Sets the state of the DTR (Data Terminal Ready) control signal.","sig":null,"attributes":[{"value":"/ Sets the state of the DTR (Data Terminal Ready) control signal.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":11460,"byte_end":11527,"line_start":362,"line_end":362,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":11532,"byte_end":11535,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ Setting a value of `true` asserts the DTR control signal. `false` clears the signal.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":11540,"byte_end":11628,"line_start":364,"line_end":364,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":11633,"byte_end":11636,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":11641,"byte_end":11654,"line_start":366,"line_end":366,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":11659,"byte_end":11662,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ This function returns an error if the DTR control signal could not be set to the desired","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":11667,"byte_end":11759,"line_start":368,"line_end":368,"column_start":5,"column_end":97}},{"value":"/ state on the underlying hardware:","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":11764,"byte_end":11801,"line_start":369,"line_end":369,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":11806,"byte_end":11809,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ * `NoDevice` if the device was disconnected.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":11814,"byte_end":11862,"line_start":371,"line_end":371,"column_start":5,"column_end":53}},{"value":"/ * `Io` for any other type of I/O error.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":11867,"byte_end":11910,"line_start":372,"line_end":372,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":12426,"byte_end":12434,"line_start":386,"line_end":386,"column_start":8,"column_end":16},"name":"read_cts","qualname":"::SerialDevice::read_cts","value":"fn (&mut self) -> ::Result<bool>","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" Reads the state of the CTS (Clear To Send) control signal.","sig":null,"attributes":[{"value":"/ Reads the state of the CTS (Clear To Send) control signal.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":11972,"byte_end":12034,"line_start":375,"line_end":375,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":12039,"byte_end":12042,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ This function returns a boolean that indicates whether the CTS control signal is asserted.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":12047,"byte_end":12141,"line_start":377,"line_end":377,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":12146,"byte_end":12149,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":12154,"byte_end":12167,"line_start":379,"line_end":379,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":12172,"byte_end":12175,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ This function returns an error if the state of the CTS control signal could not be read","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":12180,"byte_end":12271,"line_start":381,"line_end":381,"column_start":5,"column_end":96}},{"value":"/ from the underlying hardware:","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":12276,"byte_end":12309,"line_start":382,"line_end":382,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":12314,"byte_end":12317,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ * `NoDevice` if the device was disconnected.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":12322,"byte_end":12370,"line_start":384,"line_end":384,"column_start":5,"column_end":53}},{"value":"/ * `Io` for any other type of I/O error.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":12375,"byte_end":12418,"line_start":385,"line_end":385,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":12925,"byte_end":12933,"line_start":399,"line_end":399,"column_start":8,"column_end":16},"name":"read_dsr","qualname":"::SerialDevice::read_dsr","value":"fn (&mut self) -> ::Result<bool>","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" Reads the state of the DSR (Data Set Ready) control signal.","sig":null,"attributes":[{"value":"/ Reads the state of the DSR (Data Set Ready) control signal.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":12470,"byte_end":12533,"line_start":388,"line_end":388,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":12538,"byte_end":12541,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ This function returns a boolean that indicates whether the DSR control signal is asserted.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":12546,"byte_end":12640,"line_start":390,"line_end":390,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":12645,"byte_end":12648,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":12653,"byte_end":12666,"line_start":392,"line_end":392,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":12671,"byte_end":12674,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ This function returns an error if the state of the DSR control signal could not be read","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":12679,"byte_end":12770,"line_start":394,"line_end":394,"column_start":5,"column_end":96}},{"value":"/ from the underlying hardware:","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":12775,"byte_end":12808,"line_start":395,"line_end":395,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":12813,"byte_end":12816,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ * `NoDevice` if the device was disconnected.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":12821,"byte_end":12869,"line_start":397,"line_end":397,"column_start":5,"column_end":53}},{"value":"/ * `Io` for any other type of I/O error.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":12874,"byte_end":12917,"line_start":398,"line_end":398,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13421,"byte_end":13428,"line_start":412,"line_end":412,"column_start":8,"column_end":15},"name":"read_ri","qualname":"::SerialDevice::read_ri","value":"fn (&mut self) -> ::Result<bool>","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" Reads the state of the RI (Ring Indicator) control signal.","sig":null,"attributes":[{"value":"/ Reads the state of the RI (Ring Indicator) control signal.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":12969,"byte_end":13031,"line_start":401,"line_end":401,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13036,"byte_end":13039,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ This function returns a boolean that indicates whether the RI control signal is asserted.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13044,"byte_end":13137,"line_start":403,"line_end":403,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13142,"byte_end":13145,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13150,"byte_end":13163,"line_start":405,"line_end":405,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13168,"byte_end":13171,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ This function returns an error if the state of the RI control signal could not be read from","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13176,"byte_end":13271,"line_start":407,"line_end":407,"column_start":5,"column_end":100}},{"value":"/ the underlying hardware:","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13276,"byte_end":13304,"line_start":408,"line_end":408,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13309,"byte_end":13312,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ * `NoDevice` if the device was disconnected.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13317,"byte_end":13365,"line_start":410,"line_end":410,"column_start":5,"column_end":53}},{"value":"/ * `Io` for any other type of I/O error.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13370,"byte_end":13413,"line_start":411,"line_end":411,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13916,"byte_end":13923,"line_start":425,"line_end":425,"column_start":8,"column_end":15},"name":"read_cd","qualname":"::SerialDevice::read_cd","value":"fn (&mut self) -> ::Result<bool>","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" Reads the state of the CD (Carrier Detect) control signal.","sig":null,"attributes":[{"value":"/ Reads the state of the CD (Carrier Detect) control signal.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13464,"byte_end":13526,"line_start":414,"line_end":414,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13531,"byte_end":13534,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ This function returns a boolean that indicates whether the CD control signal is asserted.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13539,"byte_end":13632,"line_start":416,"line_end":416,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13637,"byte_end":13640,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13645,"byte_end":13658,"line_start":418,"line_end":418,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13663,"byte_end":13666,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ This function returns an error if the state of the CD control signal could not be read from","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13671,"byte_end":13766,"line_start":420,"line_end":420,"column_start":5,"column_end":100}},{"value":"/ the underlying hardware:","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13771,"byte_end":13799,"line_start":421,"line_end":421,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13804,"byte_end":13807,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ * `NoDevice` if the device was disconnected.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13812,"byte_end":13860,"line_start":423,"line_end":423,"column_start":5,"column_end":53}},{"value":"/ * `Io` for any other type of I/O error.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13865,"byte_end":13908,"line_start":424,"line_end":424,"column_start":5,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":45},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":14462,"byte_end":14472,"line_start":438,"line_end":438,"column_start":11,"column_end":21},"name":"SerialPort","qualname":"::SerialPort","value":"SerialPort: io::Read + io::Write","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55}],"decl_id":null,"docs":" A trait for serial port devices.","sig":null,"attributes":[{"value":"/ A trait for serial port devices.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13957,"byte_end":13993,"line_start":428,"line_end":428,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13994,"byte_end":13997,"line_start":429,"line_end":429,"column_start":1,"column_end":4}},{"value":"/ Serial port input and output is implemented through the `std::io::Read` and `std::io::Write`","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":13998,"byte_end":14094,"line_start":430,"line_end":430,"column_start":1,"column_end":97}},{"value":"/ traits. A timeout can be set with the `set_timeout()` method and applies to all subsequent I/O","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":14095,"byte_end":14193,"line_start":431,"line_end":431,"column_start":1,"column_end":99}},{"value":"/ operations.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":14194,"byte_end":14209,"line_start":432,"line_end":432,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":14210,"byte_end":14213,"line_start":433,"line_end":433,"column_start":1,"column_end":4}},{"value":"/ The `SerialPort` trait exposes several common control signals. Each control signal is","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":14214,"byte_end":14303,"line_start":434,"line_end":434,"column_start":1,"column_end":90}},{"value":"/ represented as a boolean, where `true` indicates that the signal is asserted.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":14304,"byte_end":14385,"line_start":435,"line_end":435,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":14386,"byte_end":14389,"line_start":436,"line_end":436,"column_start":1,"column_end":4}},{"value":"/ The serial port will be closed when the value is dropped.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":14390,"byte_end":14451,"line_start":437,"line_end":437,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":14541,"byte_end":14548,"line_start":440,"line_end":440,"column_start":8,"column_end":15},"name":"timeout","qualname":"::SerialPort::timeout","value":"fn (&self) -> Duration","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Returns the current timeout.\n","sig":null,"attributes":[{"value":"/ Returns the current timeout.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":14501,"byte_end":14533,"line_start":439,"line_end":439,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":14629,"byte_end":14640,"line_start":443,"line_end":443,"column_start":8,"column_end":19},"name":"set_timeout","qualname":"::SerialPort::set_timeout","value":"fn (&mut self, timeout: Duration) -> ::Result<()>","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Sets the timeout for future I/O operations.\n","sig":null,"attributes":[{"value":"/ Sets the timeout for future I/O operations.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":14574,"byte_end":14621,"line_start":442,"line_end":442,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":15078,"byte_end":15087,"line_start":455,"line_end":455,"column_start":8,"column_end":17},"name":"configure","qualname":"::SerialPort::configure","value":"fn (&mut self, settings: &PortSettings) -> ::Result<()>","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Configures a serial port device.","sig":null,"attributes":[{"value":"/ Configures a serial port device.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":14693,"byte_end":14729,"line_start":445,"line_end":445,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":14734,"byte_end":14737,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":14742,"byte_end":14755,"line_start":447,"line_end":447,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":14760,"byte_end":14763,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ This function returns an error if the settings could not be applied to the underlying","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":14768,"byte_end":14857,"line_start":449,"line_end":449,"column_start":5,"column_end":94}},{"value":"/ hardware:","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":14862,"byte_end":14875,"line_start":450,"line_end":450,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":14880,"byte_end":14883,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ * `NoDevice` if the device was disconnected.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":14888,"byte_end":14936,"line_start":452,"line_end":452,"column_start":5,"column_end":53}},{"value":"/ * `InvalidInput` if a setting is not compatible with the underlying hardware.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":14941,"byte_end":15022,"line_start":453,"line_end":453,"column_start":5,"column_end":86}},{"value":"/ * `Io` for any other type of I/O error.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":15027,"byte_end":15070,"line_start":454,"line_end":454,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16721,"byte_end":16732,"line_start":495,"line_end":495,"column_start":8,"column_end":19},"name":"reconfigure","qualname":"::SerialPort::reconfigure","value":"fn (&mut self, setup: &Fn(&mut SerialPortSettings) -> ::Result<()>) -> ::Result<()>","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Alter the serial port's configuration.","sig":null,"attributes":[{"value":"/ Alter the serial port's configuration.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":15146,"byte_end":15188,"line_start":457,"line_end":457,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":15193,"byte_end":15196,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ This method expects a function, which takes a mutable reference to the serial port's","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":15201,"byte_end":15289,"line_start":459,"line_end":459,"column_start":5,"column_end":93}},{"value":"/ configuration settings. The serial port's current settings, read from the device, are","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":15294,"byte_end":15383,"line_start":460,"line_end":460,"column_start":5,"column_end":94}},{"value":"/ yielded to the provided function. After the function returns, any changes made to the","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":15388,"byte_end":15477,"line_start":461,"line_end":461,"column_start":5,"column_end":94}},{"value":"/ settings object will be written back to the device.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":15482,"byte_end":15537,"line_start":462,"line_end":462,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":15542,"byte_end":15545,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":15550,"byte_end":15563,"line_start":464,"line_end":464,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":15568,"byte_end":15571,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ This function returns an error if the `setup` function returns an error or if there was an","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":15576,"byte_end":15670,"line_start":466,"line_end":466,"column_start":5,"column_end":99}},{"value":"/ error while reading or writing the device's configuration settings:","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":15675,"byte_end":15746,"line_start":467,"line_end":467,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":15751,"byte_end":15754,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ * `NoDevice` if the device was disconnected.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":15759,"byte_end":15807,"line_start":469,"line_end":469,"column_start":5,"column_end":53}},{"value":"/ * `InvalidInput` if a setting is not compatible with the underlying hardware.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":15812,"byte_end":15893,"line_start":470,"line_end":470,"column_start":5,"column_end":86}},{"value":"/ * `Io` for any other type of I/O error.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":15898,"byte_end":15941,"line_start":471,"line_end":471,"column_start":5,"column_end":48}},{"value":"/ * Any error returned by the `setup` function.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":15946,"byte_end":15995,"line_start":472,"line_end":472,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16000,"byte_end":16003,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ ## Example","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16008,"byte_end":16022,"line_start":474,"line_end":474,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16027,"byte_end":16030,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ The following is a function that toggles a serial port's settings between one and two stop","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16035,"byte_end":16129,"line_start":476,"line_end":476,"column_start":5,"column_end":99}},{"value":"/ bits:","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16134,"byte_end":16143,"line_start":477,"line_end":477,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16148,"byte_end":16151,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16156,"byte_end":16169,"line_start":479,"line_end":479,"column_start":5,"column_end":18}},{"value":"/ use std::io;","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16174,"byte_end":16190,"line_start":480,"line_end":480,"column_start":5,"column_end":21}},{"value":"/ use serial_core::prelude::*;","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16195,"byte_end":16227,"line_start":481,"line_end":481,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16232,"byte_end":16235,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ fn toggle_stop_bits<T: SerialPort>(port: &mut T) -> serial_core::Result<()> {","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16240,"byte_end":16321,"line_start":483,"line_end":483,"column_start":5,"column_end":86}},{"value":"/     port.reconfigure(&|settings| {","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16326,"byte_end":16364,"line_start":484,"line_end":484,"column_start":5,"column_end":43}},{"value":"/         let stop_bits = match settings.stop_bits() {","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16369,"byte_end":16425,"line_start":485,"line_end":485,"column_start":5,"column_end":61}},{"value":"/             Some(serial_core::Stop1)        => serial_core::Stop2,","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16430,"byte_end":16500,"line_start":486,"line_end":486,"column_start":5,"column_end":75}},{"value":"/             Some(serial_core::Stop2) | None => serial_core::Stop1,","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16505,"byte_end":16575,"line_start":487,"line_end":487,"column_start":5,"column_end":75}},{"value":"/         };","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16580,"byte_end":16594,"line_start":488,"line_end":488,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16599,"byte_end":16602,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/         settings.set_stop_bits(stop_bits);","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16607,"byte_end":16653,"line_start":490,"line_end":490,"column_start":5,"column_end":51}},{"value":"/         Ok(())","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16658,"byte_end":16676,"line_start":491,"line_end":491,"column_start":5,"column_end":23}},{"value":"/     })","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16681,"byte_end":16691,"line_start":492,"line_end":492,"column_start":5,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16696,"byte_end":16701,"line_start":493,"line_end":493,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16706,"byte_end":16713,"line_start":494,"line_end":494,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":17273,"byte_end":17280,"line_start":508,"line_end":508,"column_start":8,"column_end":15},"name":"set_rts","qualname":"::SerialPort::set_rts","value":"fn (&mut self, level: bool) -> ::Result<()>","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Sets the state of the RTS (Request To Send) control signal.","sig":null,"attributes":[{"value":"/ Sets the state of the RTS (Request To Send) control signal.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16819,"byte_end":16882,"line_start":497,"line_end":497,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16887,"byte_end":16890,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ Setting a value of `true` asserts the RTS control signal. `false` clears the signal.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16895,"byte_end":16983,"line_start":499,"line_end":499,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16988,"byte_end":16991,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":16996,"byte_end":17009,"line_start":501,"line_end":501,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":17014,"byte_end":17017,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ This function returns an error if the RTS control signal could not be set to the desired","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":17022,"byte_end":17114,"line_start":503,"line_end":503,"column_start":5,"column_end":97}},{"value":"/ state on the underlying hardware:","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":17119,"byte_end":17156,"line_start":504,"line_end":504,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":17161,"byte_end":17164,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ * `NoDevice` if the device was disconnected.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":17169,"byte_end":17217,"line_start":506,"line_end":506,"column_start":5,"column_end":53}},{"value":"/ * `Io` for any other type of I/O error.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":17222,"byte_end":17265,"line_start":507,"line_end":507,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":17785,"byte_end":17792,"line_start":521,"line_end":521,"column_start":8,"column_end":15},"name":"set_dtr","qualname":"::SerialPort::set_dtr","value":"fn (&mut self, level: bool) -> ::Result<()>","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Sets the state of the DTR (Data Terminal Ready) control signal.","sig":null,"attributes":[{"value":"/ Sets the state of the DTR (Data Terminal Ready) control signal.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":17327,"byte_end":17394,"line_start":510,"line_end":510,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":17399,"byte_end":17402,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ Setting a value of `true` asserts the DTR control signal. `false` clears the signal.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":17407,"byte_end":17495,"line_start":512,"line_end":512,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":17500,"byte_end":17503,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":17508,"byte_end":17521,"line_start":514,"line_end":514,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":17526,"byte_end":17529,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ This function returns an error if the DTR control signal could not be set to the desired","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":17534,"byte_end":17626,"line_start":516,"line_end":516,"column_start":5,"column_end":97}},{"value":"/ state on the underlying hardware:","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":17631,"byte_end":17668,"line_start":517,"line_end":517,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":17673,"byte_end":17676,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ * `NoDevice` if the device was disconnected.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":17681,"byte_end":17729,"line_start":519,"line_end":519,"column_start":5,"column_end":53}},{"value":"/ * `Io` for any other type of I/O error.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":17734,"byte_end":17777,"line_start":520,"line_end":520,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":18293,"byte_end":18301,"line_start":534,"line_end":534,"column_start":8,"column_end":16},"name":"read_cts","qualname":"::SerialPort::read_cts","value":"fn (&mut self) -> ::Result<bool>","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Reads the state of the CTS (Clear To Send) control signal.","sig":null,"attributes":[{"value":"/ Reads the state of the CTS (Clear To Send) control signal.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":17839,"byte_end":17901,"line_start":523,"line_end":523,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":17906,"byte_end":17909,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ This function returns a boolean that indicates whether the CTS control signal is asserted.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":17914,"byte_end":18008,"line_start":525,"line_end":525,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":18013,"byte_end":18016,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":18021,"byte_end":18034,"line_start":527,"line_end":527,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":18039,"byte_end":18042,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ This function returns an error if the state of the CTS control signal could not be read","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":18047,"byte_end":18138,"line_start":529,"line_end":529,"column_start":5,"column_end":96}},{"value":"/ from the underlying hardware:","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":18143,"byte_end":18176,"line_start":530,"line_end":530,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":18181,"byte_end":18184,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ * `NoDevice` if the device was disconnected.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":18189,"byte_end":18237,"line_start":532,"line_end":532,"column_start":5,"column_end":53}},{"value":"/ * `Io` for any other type of I/O error.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":18242,"byte_end":18285,"line_start":533,"line_end":533,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":18792,"byte_end":18800,"line_start":547,"line_end":547,"column_start":8,"column_end":16},"name":"read_dsr","qualname":"::SerialPort::read_dsr","value":"fn (&mut self) -> ::Result<bool>","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Reads the state of the DSR (Data Set Ready) control signal.","sig":null,"attributes":[{"value":"/ Reads the state of the DSR (Data Set Ready) control signal.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":18337,"byte_end":18400,"line_start":536,"line_end":536,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":18405,"byte_end":18408,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ This function returns a boolean that indicates whether the DSR control signal is asserted.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":18413,"byte_end":18507,"line_start":538,"line_end":538,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":18512,"byte_end":18515,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":18520,"byte_end":18533,"line_start":540,"line_end":540,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":18538,"byte_end":18541,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ This function returns an error if the state of the DSR control signal could not be read","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":18546,"byte_end":18637,"line_start":542,"line_end":542,"column_start":5,"column_end":96}},{"value":"/ from the underlying hardware:","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":18642,"byte_end":18675,"line_start":543,"line_end":543,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":18680,"byte_end":18683,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ * `NoDevice` if the device was disconnected.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":18688,"byte_end":18736,"line_start":545,"line_end":545,"column_start":5,"column_end":53}},{"value":"/ * `Io` for any other type of I/O error.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":18741,"byte_end":18784,"line_start":546,"line_end":546,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":19288,"byte_end":19295,"line_start":560,"line_end":560,"column_start":8,"column_end":15},"name":"read_ri","qualname":"::SerialPort::read_ri","value":"fn (&mut self) -> ::Result<bool>","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Reads the state of the RI (Ring Indicator) control signal.","sig":null,"attributes":[{"value":"/ Reads the state of the RI (Ring Indicator) control signal.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":18836,"byte_end":18898,"line_start":549,"line_end":549,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":18903,"byte_end":18906,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ This function returns a boolean that indicates whether the RI control signal is asserted.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":18911,"byte_end":19004,"line_start":551,"line_end":551,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":19009,"byte_end":19012,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":19017,"byte_end":19030,"line_start":553,"line_end":553,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":19035,"byte_end":19038,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ This function returns an error if the state of the RI control signal could not be read from","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":19043,"byte_end":19138,"line_start":555,"line_end":555,"column_start":5,"column_end":100}},{"value":"/ the underlying hardware:","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":19143,"byte_end":19171,"line_start":556,"line_end":556,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":19176,"byte_end":19179,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ * `NoDevice` if the device was disconnected.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":19184,"byte_end":19232,"line_start":558,"line_end":558,"column_start":5,"column_end":53}},{"value":"/ * `Io` for any other type of I/O error.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":19237,"byte_end":19280,"line_start":559,"line_end":559,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":19783,"byte_end":19790,"line_start":573,"line_end":573,"column_start":8,"column_end":15},"name":"read_cd","qualname":"::SerialPort::read_cd","value":"fn (&mut self) -> ::Result<bool>","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Reads the state of the CD (Carrier Detect) control signal.","sig":null,"attributes":[{"value":"/ Reads the state of the CD (Carrier Detect) control signal.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":19331,"byte_end":19393,"line_start":562,"line_end":562,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":19398,"byte_end":19401,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ This function returns a boolean that indicates whether the CD control signal is asserted.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":19406,"byte_end":19499,"line_start":564,"line_end":564,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":19504,"byte_end":19507,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":19512,"byte_end":19525,"line_start":566,"line_end":566,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":19530,"byte_end":19533,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ This function returns an error if the state of the CD control signal could not be read from","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":19538,"byte_end":19633,"line_start":568,"line_end":568,"column_start":5,"column_end":100}},{"value":"/ the underlying hardware:","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":19638,"byte_end":19666,"line_start":569,"line_end":569,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":19671,"byte_end":19674,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ * `NoDevice` if the device was disconnected.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":19679,"byte_end":19727,"line_start":571,"line_end":571,"column_start":5,"column_end":53}},{"value":"/ * `Io` for any other type of I/O error.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":19732,"byte_end":19775,"line_start":572,"line_end":572,"column_start":5,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":68},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":21404,"byte_end":21422,"line_start":631,"line_end":631,"column_start":11,"column_end":29},"name":"SerialPortSettings","qualname":"::SerialPortSettings","value":"SerialPortSettings","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78}],"decl_id":null,"docs":" A trait for objects that implement serial port configurations.\n","sig":null,"attributes":[{"value":"/ A trait for objects that implement serial port configurations.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":21327,"byte_end":21393,"line_start":630,"line_end":630,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":21732,"byte_end":21741,"line_start":637,"line_end":637,"column_start":8,"column_end":17},"name":"baud_rate","qualname":"::SerialPortSettings::baud_rate","value":"fn (&self) -> Option<BaudRate>","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Returns the current baud rate.","sig":null,"attributes":[{"value":"/ Returns the current baud rate.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":21429,"byte_end":21463,"line_start":632,"line_end":632,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":21468,"byte_end":21471,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ This function returns `None` if the baud rate could not be determined. This may occur if","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":21476,"byte_end":21568,"line_start":634,"line_end":634,"column_start":5,"column_end":97}},{"value":"/ the hardware is in an uninitialized state. Setting a baud rate with `set_baud_rate()`","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":21573,"byte_end":21662,"line_start":635,"line_end":635,"column_start":5,"column_end":94}},{"value":"/ should initialize the baud rate to a supported value.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":21667,"byte_end":21724,"line_start":636,"line_end":636,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":22135,"byte_end":22144,"line_start":645,"line_end":645,"column_start":8,"column_end":17},"name":"char_size","qualname":"::SerialPortSettings::char_size","value":"fn (&self) -> Option<CharSize>","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Returns the character size.","sig":null,"attributes":[{"value":"/ Returns the character size.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":21775,"byte_end":21806,"line_start":639,"line_end":639,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":21811,"byte_end":21814,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ This function returns `None` if the character size could not be determined. This may occur","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":21819,"byte_end":21913,"line_start":641,"line_end":641,"column_start":5,"column_end":99}},{"value":"/ if the hardware is in an uninitialized state or is using a non-standard character size.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":21918,"byte_end":22009,"line_start":642,"line_end":642,"column_start":5,"column_end":96}},{"value":"/ Setting a baud rate with `set_char_size()` should initialize the character size to a","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":22014,"byte_end":22102,"line_start":643,"line_end":643,"column_start":5,"column_end":93}},{"value":"/ supported value.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":22107,"byte_end":22127,"line_start":644,"line_end":644,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":22526,"byte_end":22532,"line_start":652,"line_end":652,"column_start":8,"column_end":14},"name":"parity","qualname":"::SerialPortSettings::parity","value":"fn (&self) -> Option<Parity>","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Returns the parity-checking mode.","sig":null,"attributes":[{"value":"/ Returns the parity-checking mode.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":22178,"byte_end":22215,"line_start":647,"line_end":647,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":22220,"byte_end":22223,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ This function returns `None` if the parity mode could not be determined. This may occur if","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":22228,"byte_end":22322,"line_start":649,"line_end":649,"column_start":5,"column_end":99}},{"value":"/ the hardware is in an uninitialized state or is using a non-standard parity mode. Setting","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":22327,"byte_end":22420,"line_start":650,"line_end":650,"column_start":5,"column_end":98}},{"value":"/ a parity mode with `set_parity()` should initialize the parity mode to a supported value.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":22425,"byte_end":22518,"line_start":651,"line_end":651,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":22949,"byte_end":22958,"line_start":660,"line_end":660,"column_start":8,"column_end":17},"name":"stop_bits","qualname":"::SerialPortSettings::stop_bits","value":"fn (&self) -> Option<StopBits>","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Returns the number of stop bits.","sig":null,"attributes":[{"value":"/ Returns the number of stop bits.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":22564,"byte_end":22600,"line_start":654,"line_end":654,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":22605,"byte_end":22608,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ This function returns `None` if the number of stop bits could not be determined. This may","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":22613,"byte_end":22706,"line_start":656,"line_end":656,"column_start":5,"column_end":98}},{"value":"/ occur if the hardware is in an uninitialized state or is using an unsupported stop bit","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":22711,"byte_end":22801,"line_start":657,"line_end":657,"column_start":5,"column_end":95}},{"value":"/ configuration. Setting the number of stop bits with `set_stop-bits()` should initialize the","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":22806,"byte_end":22901,"line_start":658,"line_end":658,"column_start":5,"column_end":100}},{"value":"/ stop bits to a supported value.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":22906,"byte_end":22941,"line_start":659,"line_end":659,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":23375,"byte_end":23387,"line_start":668,"line_end":668,"column_start":8,"column_end":20},"name":"flow_control","qualname":"::SerialPortSettings::flow_control","value":"fn (&self) -> Option<FlowControl>","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Returns the flow control mode.","sig":null,"attributes":[{"value":"/ Returns the flow control mode.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":22992,"byte_end":23026,"line_start":662,"line_end":662,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":23031,"byte_end":23034,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ This function returns `None` if the flow control mode could not be determined. This may","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":23039,"byte_end":23130,"line_start":664,"line_end":664,"column_start":5,"column_end":96}},{"value":"/ occur if the hardware is in an uninitialized state or is using an unsupported flow control","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":23135,"byte_end":23229,"line_start":665,"line_end":665,"column_start":5,"column_end":99}},{"value":"/ mode. Setting a flow control mode with `set_flow_control()` should initialize the flow","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":23234,"byte_end":23324,"line_start":666,"line_end":666,"column_start":5,"column_end":95}},{"value":"/ control mode to a supported value.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":23329,"byte_end":23367,"line_start":667,"line_end":667,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":23735,"byte_end":23748,"line_start":677,"line_end":677,"column_start":8,"column_end":21},"name":"set_baud_rate","qualname":"::SerialPortSettings::set_baud_rate","value":"fn (&mut self, baud_rate: BaudRate) -> ::Result<()>","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Sets the baud rate.","sig":null,"attributes":[{"value":"/ Sets the baud rate.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":23424,"byte_end":23447,"line_start":670,"line_end":670,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":23452,"byte_end":23455,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ ## Errors","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":23460,"byte_end":23473,"line_start":672,"line_end":672,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":23478,"byte_end":23481,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ If the implementation does not support the requested baud rate, this function may return an","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":23486,"byte_end":23581,"line_start":674,"line_end":674,"column_start":5,"column_end":100}},{"value":"/ `InvalidInput` error. Even if the baud rate is accepted by `set_baud_rate()`, it may not be","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":23586,"byte_end":23681,"line_start":675,"line_end":675,"column_start":5,"column_end":100}},{"value":"/ supported by the underlying hardware.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":23686,"byte_end":23727,"line_start":676,"line_end":676,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":23839,"byte_end":23852,"line_start":680,"line_end":680,"column_start":8,"column_end":21},"name":"set_char_size","qualname":"::SerialPortSettings::set_char_size","value":"fn (&mut self, char_size: CharSize) -> ()","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Sets the character size.\n","sig":null,"attributes":[{"value":"/ Sets the character size.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":23803,"byte_end":23831,"line_start":679,"line_end":679,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":23933,"byte_end":23943,"line_start":683,"line_end":683,"column_start":8,"column_end":18},"name":"set_parity","qualname":"::SerialPortSettings::set_parity","value":"fn (&mut self, parity: Parity) -> ()","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Sets the parity-checking mode.\n","sig":null,"attributes":[{"value":"/ Sets the parity-checking mode.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":23891,"byte_end":23925,"line_start":682,"line_end":682,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":24018,"byte_end":24031,"line_start":686,"line_end":686,"column_start":8,"column_end":21},"name":"set_stop_bits","qualname":"::SerialPortSettings::set_stop_bits","value":"fn (&mut self, stop_bits: StopBits) -> ()","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Sets the number of stop bits.\n","sig":null,"attributes":[{"value":"/ Sets the number of stop bits.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":23977,"byte_end":24010,"line_start":685,"line_end":685,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":24109,"byte_end":24125,"line_start":689,"line_end":689,"column_start":8,"column_end":24},"name":"set_flow_control","qualname":"::SerialPortSettings::set_flow_control","value":"fn (&mut self, flow_control: FlowControl) -> ()","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Sets the flow control mode.\n","sig":null,"attributes":[{"value":"/ Sets the flow control mode.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":24070,"byte_end":24101,"line_start":688,"line_end":688,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":225},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":24284,"byte_end":24296,"line_start":694,"line_end":694,"column_start":12,"column_end":24},"name":"PortSettings","qualname":"::PortSettings","value":"PortSettings { baud_rate, char_size, parity, stop_bits, flow_control }","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230}],"decl_id":null,"docs":" A device-indepenent implementation of serial port settings.\n","sig":null,"attributes":[{"value":"/ A device-indepenent implementation of serial port settings.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":24168,"byte_end":24231,"line_start":692,"line_end":692,"column_start":1,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":226},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":24326,"byte_end":24335,"line_start":696,"line_end":696,"column_start":9,"column_end":18},"name":"baud_rate","qualname":"::PortSettings::baud_rate","value":"BaudRate","parent":{"krate":0,"index":225},"children":[],"decl_id":null,"docs":" Baud rate.\n","sig":null,"attributes":[{"value":"/ Baud rate.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":24303,"byte_end":24317,"line_start":695,"line_end":695,"column_start":5,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":227},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":24380,"byte_end":24389,"line_start":699,"line_end":699,"column_start":9,"column_end":18},"name":"char_size","qualname":"::PortSettings::char_size","value":"CharSize","parent":{"krate":0,"index":225},"children":[],"decl_id":null,"docs":" Character size.\n","sig":null,"attributes":[{"value":"/ Character size.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":24352,"byte_end":24371,"line_start":698,"line_end":698,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":228},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":24440,"byte_end":24446,"line_start":702,"line_end":702,"column_start":9,"column_end":15},"name":"parity","qualname":"::PortSettings::parity","value":"Parity","parent":{"krate":0,"index":225},"children":[],"decl_id":null,"docs":" Parity checking mode.\n","sig":null,"attributes":[{"value":"/ Parity checking mode.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":24406,"byte_end":24431,"line_start":701,"line_end":701,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":229},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":24494,"byte_end":24503,"line_start":705,"line_end":705,"column_start":9,"column_end":18},"name":"stop_bits","qualname":"::PortSettings::stop_bits","value":"StopBits","parent":{"krate":0,"index":225},"children":[],"decl_id":null,"docs":" Number of stop bits.\n","sig":null,"attributes":[{"value":"/ Number of stop bits.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":24461,"byte_end":24485,"line_start":704,"line_end":704,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":230},"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":24551,"byte_end":24563,"line_start":708,"line_end":708,"column_start":9,"column_end":21},"name":"flow_control","qualname":"::PortSettings::flow_control","value":"FlowControl","parent":{"krate":0,"index":225},"children":[],"decl_id":null,"docs":" Flow control mode.\n","sig":null,"attributes":[{"value":"/ Flow control mode.","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":24520,"byte_end":24542,"line_start":707,"line_end":707,"column_start":5,"column_end":27}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":1396,"byte_end":1401,"line_start":56,"line_end":56,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":21}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":1730,"byte_end":1735,"line_start":70,"line_end":70,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":1891,"byte_end":1896,"line_start":76,"line_end":76,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":1995,"byte_end":2000,"line_start":82,"line_end":82,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":2157,"byte_end":2162,"line_start":88,"line_end":88,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3737,"byte_end":3745,"line_start":156,"line_end":156,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":19847,"byte_end":19848,"line_start":576,"line_end":576,"column_start":24,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":24609,"byte_end":24621,"line_start":711,"line_end":711,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":1396,"byte_end":1401,"line_start":56,"line_end":56,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":1730,"byte_end":1735,"line_start":70,"line_end":70,"column_start":23,"column_end":28},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":110},"to":{"krate":2,"index":6181}},{"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":1891,"byte_end":1896,"line_start":76,"line_end":76,"column_start":19,"column_end":24},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":110},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":1995,"byte_end":2000,"line_start":82,"line_end":82,"column_start":26,"column_end":31},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":110},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":2157,"byte_end":2162,"line_start":88,"line_end":88,"column_start":26,"column_end":31},"kind":{"Impl":{"id":4}},"from":{"krate":1,"index":2532},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":3737,"byte_end":3745,"line_start":156,"line_end":156,"column_start":6,"column_end":14},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":115},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":8732,"byte_end":8736,"line_start":300,"line_end":300,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":2932},"to":{"krate":0,"index":33}},{"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":8743,"byte_end":8748,"line_start":300,"line_end":300,"column_start":40,"column_end":45},"kind":"SuperTrait","from":{"krate":1,"index":2991},"to":{"krate":0,"index":33}},{"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":14478,"byte_end":14482,"line_start":438,"line_end":438,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":2932},"to":{"krate":0,"index":45}},{"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":14489,"byte_end":14494,"line_start":438,"line_end":438,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":1,"index":2991},"to":{"krate":0,"index":45}},{"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":19847,"byte_end":19848,"line_start":576,"line_end":576,"column_start":24,"column_end":25},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":57},"to":{"krate":0,"index":45}},{"span":{"file_name":"/home/scoob/.cargo/registry/src/github.com-1ecc6299db9ec823/serial-core-0.4.0/src/lib.rs","byte_start":24609,"byte_end":24621,"line_start":711,"line_end":711,"column_start":29,"column_end":41},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":225},"to":{"krate":0,"index":68}}]}